AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  RegionAZ1Name:
    Description: "Availability Zone 1 Name in Region"
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "us-west-2a"
  RegionAZ2Name:
    Description: "Availability Zone 2 Name in Region"
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "us-west-2b"
  EC2KeyPair:
    Description: "Name of existing EC2 key pair"
    Type: AWS::EC2::KeyPair::KeyName
  CreateBastionInstance:
    Description: "Create a bastion instance inside the VPC"
    Type: String
    Default: true
  VPCCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
  SubnetAPublicCIDR:
    Description: CIDR block for the public subnet in availability zone
    Type: String
    Default: 10.0.10.0/24
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
  SubnetBPublicCIDR:
    Description: CIDR block for the public subnet in availability zone
    Type: String
    Default: 10.0.20.0/24
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
  SubnetAPrivateCIDR:
    Description: CIDR block for the private subnet in availability zone
    Type: String
    Default: 10.0.30.0/24
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
  SubnetBPrivateCIDR:
    Description: CIDR block for the private subnet in availability zone
    Type: String
    Default: 10.0.40.0/24
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
  BastionSSHCIDR:
    Description: "CIDR block to allow access to bastion SSH"
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
    Default: 10.0.10.0/24
Resources:
  # Nested stack, This stack creates the VPC, Private/Public subnets and bastion
  VpcStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/aws-service-catalog-reference-architectures/vpc/sc-vpc-ra.json
      TimeoutInMinutes: '60'
      Parameters:
        RegionAZ1Name : !Ref RegionAZ1Name
        RegionAZ2Name : !Ref RegionAZ2Name
        EC2KeyPair: !Ref EC2KeyPair
        VPCCIDR: !Ref VPCCIDR
        SubnetAPublicCIDR: !Ref SubnetAPublicCIDR
        SubnetBPublicCIDR: !Ref SubnetBPublicCIDR
        SubnetAPrivateCIDR: !Ref SubnetAPrivateCIDR
        SubnetBPrivateCIDR: !Ref SubnetBPrivateCIDR
        CreateBastionInstance: !Ref CreateBastionInstance
        BastionSSHCIDR: !Ref BastionSSHCIDR
  # Get Resource ID's from nested stack via lambda
  GetValues:
    Type: 'Custom::Transformer'
    DependsOn : [VpcStack]
    Properties:
      ServiceToken: !GetAtt
        - GetCfResourceFunction
        - Arn
      CfStackName: !Select [1, !Split ['/', !Ref VpcStack]]
  GetCfResourceFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: "Function must be called from CloudFormation. Accepts CloudFormation export name and returns value"
      Code:
        ZipFile: |
          import json
          from botocore.vendored import requests
          import boto3
          import traceback
          import secrets
          def send_response(event, context, response_status, response_data=None, no_echo=False, reason=None):
            response_body = dict()
            response_body['Status'] = response_status
            if reason is None:
              response_body['Reason'] = 'See CloudWatch Log Stream: ' + context.log_stream_name
            else:
              response_body['Reason'] = reason + ' - More info in CloudWatch Log Stream: ' + context.log_stream_name
            if 'PhysicalResourceId' in event:
              response_body['PhysicalResourceId'] = event['PhysicalResourceId']
            else:
              response_body['PhysicalResourceId'] = context.log_stream_name
            response_body['StackId'] = event['StackId']
            response_body['RequestId'] = event['RequestId']
            response_body['LogicalResourceId'] = event['LogicalResourceId']
            response_body['NoEcho'] = no_echo
            response_body['Data'] = response_data
            json_response_body = json.dumps(response_body)
            print("Response body:\n" + json_response_body)
            try:
              response = requests.put(event['ResponseURL'],
                                        data=json_response_body,
                                        headers={'content-type': '', 'content-length': str(len(json_response_body))})
              print("Response Status code: " + response.reason)
            except Exception as e:
              print("send(..) failed executing requests.put(..): " + str(e))

          def get_cf_resource(stack_name, resource_id):
            client = boto3.client('cloudformation')

            response = client.describe_stack_resource(
                StackName=stack_name,
                LogicalResourceId=resource_id
            )
            return response['StackResourceDetail']['PhysicalResourceId']

          def lambda_handler(event, context):
            data = {}
            if event['RequestType'] == 'Delete':
              send_response(event, context, 'SUCCESS')
              return
            try:
              stack_name = event['ResourceProperties']['CfStackName']
              ## exports variables begin
              exp_subnet_a_private = get_cf_resource(stack_name, 'SubnetAPrivate')
              exp_subnet_a_public = get_cf_resource(stack_name, 'SubnetAPublic')
              exp_vpc = get_cf_resource(stack_name, 'VPC')
            except Exception:
              send_response(event, context, 'FAILED', reason=traceback.format_exc())
              return

            data = {'exp_subnet_a_private': exp_subnet_a_private, 'exp_subnet_a_public': exp_subnet_a_public, 'exp_vpc': exp_vpc}
            send_response(event, context, 'SUCCESS', data)
      Handler: index.lambda_handler
      Runtime: python3.6
      Timeout: 300
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/lambda-PowerUser'
  ## Create SG's
  EMRMasterSlaveSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: TestEmrSecurityGroup
      GroupDescription: CloudFormationGroup
      VpcId: !GetAtt GetValues.exp_vpc
  EMRMasterSlaveIngressSelf:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt EMRMasterSlaveSecurityGroup.GroupId
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !GetAtt EMRMasterSlaveSecurityGroup.GroupId
  EMRMasterSlaveIngressBastionSSH:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt EMRMasterSlaveSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId:
        Fn::GetAtt: [VpcStack, Outputs.BastionSecurityGroupID]
  emrMasterSlaveEgressAllIPV4:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt EMRMasterSlaveSecurityGroup.GroupId
      IpProtocol: "-1"
      CidrIp: "0.0.0.0/0"
  ## service access sg
  emrServiceAccessSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: emrServiceAccessTestGroup
      GroupDescription: "EMR managed Service Access Security Group"
      VpcId: !GetAtt GetValues.exp_vpc
  emrMasterSlaveIngress8443:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt EMRMasterSlaveSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 8443
      ToPort: 8443
      SourceSecurityGroupId: !GetAtt emrServiceAccessSG.GroupId
  emrServiceAccessEgress8443:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt emrServiceAccessSG.GroupId
      IpProtocol: tcp
      FromPort: 8443
      ToPort: 8443
      DestinationSecurityGroupId: !GetAtt EMRMasterSlaveSecurityGroup.GroupId
  emrServiceAccessEgressAllIpv4:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt emrServiceAccessSG.GroupId
      IpProtocol: "-1"
      CidrIp: "0.0.0.0/0"
  emrServiceAccessEgressAllIpv6:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt emrServiceAccessSG.GroupId
      IpProtocol: "-1"
      CidrIpv6: "::/0"
  ## Create roles
  EmrServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: test-emr-service-blog-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - elasticmapreduce.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole
  KmsPolicyForEmr:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: KmsPolicyForEmr
            Effect: Allow
            Action:
            - kms:ReEncrypt*,
            - kms:GenerateDataKey*,
            - kms:Encrypt,
            - kms:DescribeKey,
            - kms:Decrypt
            Resource: "*"
  EmrEc2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: test-emr-ec2-blog-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role
      - arn:aws:iam::aws:policy/AWSKeyManagementServicePowerUser
      - !Ref KmsPolicyForEmr
  EMRInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: test-emr-ec2-blog-role
      Roles:
      - Ref: EmrEc2Role
  ## KMS
  EMRKmsKey:
    DependsOn : [EMRInstanceProfile, emrServiceAccessEgress8443]
    Type: AWS::KMS::Key
    Properties:
      Description: Encrypt sensitive data for Emr
      PendingWindowInDays: 7
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
              - ''
              - - 'arn:aws:iam::'
                - !Ref 'AWS::AccountId'
                - ":root"
          Action:
          - kms:*
          Resource: "*"
        - Sid: Allow use of the key
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
              - ''
              - - 'arn:aws:iam::'
                - !Ref 'AWS::AccountId'
                - ':role/test-emr-ec2-blog-role'
          Action:
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt
          - kms:GenerateDataKey*
          - kms:DescribeKey
          Resource: "*"
  EMRKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/EmrEncryptionKey
      TargetKeyId:
        Ref: EMRKmsKey
  # SSM PARAMS
  SsmEmrPrivateSubnet:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/test/emr/private_subnet"
      Type: String
      Value: !GetAtt GetValues.exp_subnet_a_private
  SsmEmrPublicSubnet:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/test/emr/public_subnet"
      Type: String
      Value: !GetAtt GetValues.exp_subnet_a_public
  SsmEmrVpc:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/test/emr/vpc"
      Type: String
      Value: !GetAtt GetValues.exp_vpc
  SsmEmrSg:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/test/emr/master_slave_sg"
      Type: String
      Value:
        Ref: EMRMasterSlaveSecurityGroup
  SsmEmrServiceAccessSg:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/test/emr/service_access_sg"
      Type: String
      Value:
        Ref: emrServiceAccessSG
  SsmEmrKms:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/test/emr/kms"
      Type: String
      Value:
        Ref: EMRKmsKey
  SsmEmrDefaultEmrEc2Role:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/test/emr/default_emr_ec2_role"
      Type: String
      Value: "test-emr-ec2-blog-role"
  SsmEmrDefaultEmrServieRole:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/test/emr/default_emr_service_role"
      Type: String
      Value: "test-emr-service-blog-role"
Outputs:
  BastionInstancePublicIP:
    Description: Bastion Instance Public IP
    Value:
      Fn::GetAtt: [VpcStack, Outputs.BastionInstancePublicIP]
  VpcId:
    Description: Vpc IP
    Value: !GetAtt GetValues.exp_vpc
  PublicSubnetId:
    Description: Public Subnet Id
    Value: !GetAtt GetValues.exp_subnet_a_public
  PrivateSubnetId:
    Description: Private Subnet Id
    Value: !GetAtt GetValues.exp_subnet_a_private


